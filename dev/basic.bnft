#include "dawn.bnft"
BASIC_NATIVE:
  { ANY_CHAR }  -> #encodeuri ANY_CHAR

BASIC_END_NATIVE:
  OPTSEPARATOR "}" OPTSEPARATOR "endnative"

BASIC_FUNCTION:
  "native" WHITESPACE "javascript" OPTSEPARATOR "{" OPTSEPARATOR BASIC_NATIVE BASIC_END_NATIVE -> "Native.Javascript:" BASIC_NATIVE

BASIC_ALL_INPUTS:
 "all" WHITESPACE    -> "_$"
 ""
 
BASIC_SPECIFICATION:
  OPTWHITESPACE "input" WHITESPACE BASIC_ALL_INPUTS URI OPTSEPARATOR  "{" OPTSEPARATOR BASIC_FUNCTION OPTSEPARATOR "}" -> BASIC_FUNCTION ">>NewInput:" URI BASIC_ALL_INPUTS
  OPTWHITESPACE "output" WHITESPACE URI OPTSEPARATOR -> "NewOutput:" URI

BASIC_BLOCK:
  BASIC_SPECIFICATION -> BASIC_SPECIFICATION " "

BASIC_NATIVE_CONSTRUCTOR:
  SEPARATOR BASIC_FUNCTION SEPARATOR -> BASIC_FUNCTION ">>"
  
BASIC_DEFINITION:
 "define" WHITESPACE URI SEPARATOR "{" [ BASIC_NATIVE_CONSTRUCTOR ] OPTSEPARATOR { BASIC_BLOCK OPTSEPARATOR } "}" -> BASIC_NATIVE_CONSTRUCTOR "NewObject:" URI "\n[" BASIC_BLOCK "]>>" URI

BASIC_SYNTAX:
 BASIC_DEFINITION ->  BASIC_DEFINITION "\n"

BASIC_EXP:
 BASIC_NUMBER
 URI
 "(" EXPRESSION ")"

BASIC_FACTOR:
 BASIC_EXP "^" BASIC_EXPRESSION 
 
BASIC_ADDEND:
 BASIC_FACTOR { ("*"|"/") BASIC_FACTOR } 

BASIC_NEGATION:
 BASIC_ADDEND { ("+"|"-") BASIC_ADDEND }

BASIC_EXPRESSION:
 [ "-" ] BASIC_NEGATION
 
TO_DAWN_BASE:
 BASIC_SYNTAX -> #significantwhitespace "{" "}\n" ""

MYDIGIT:
 "0".."9"
 ","
 "."
 "-"

DIGITS_TO_SUPER:
 "0" -> "⁰"
 "1" -> "¹"
 "2" -> "²"
 "3" -> "³"
 "4" -> "⁴"
 "5" -> "⁵"
 "6" -> "⁶"
 "7" -> "⁷"
 "8" -> "⁸"
 "9" -> "⁹"

DIGITS_TO_SUB:
 "0" -> "₀"
 "1" -> "₁"
 "2" -> "₂"
 "3" -> "₃"
 "4" -> "₄"
 "5" -> "₅"
 "6" -> "₆"
 "7" -> "₇"
 "8" -> "₈"
 "9" -> "₉"
 
NUMBER:
 { MYDIGIT }

NUMBER_TO_SUPER:
 { DIGITS_TO_SUPER }

NUMBER_TO_SUB:
 { DIGITS_TO_SUB }

URILOOKUP_FROM:
 URI

PIPEEND_FROM:
  OPTWHITESPACE ">>" OPTSEPARATOR URILOOKUP_FROM  [ PIPEEND_FROM ]
  OPTWHITESPACE ">>" OPTSEPARATOR PIPE_FROM     [ PIPEEND_FROM ]

PIPELISTELEMENTS_FROM:
  PIPE_FROM
  
PIPELISTEND_FROM:
 { SEPARATOR PIPELISTELEMENTS_FROM } 

INNER_PIPELIST_FROM:
 PIPE_FROM PIPELISTEND_FROM

PIPELIST_FROM:
 "[" OPTWHITESPACE INNER_PIPELIST_FROM OPTWHITESPACE "]" 

PIPE_FROM:
 URILOOKUP_FROM PIPEEND_FROM
 PIPELIST_FROM  PIPEEND_FROM 
 URILOOKUP_FROM
 PIPELIST_FROM

PROGRAMLINE_FROM:
 ASSIGNMENT_FROM     -> #indent ASSIGNMENT_FROM
 COMMAND_FROM        -> #indent COMMAND_FROM
 "REMARK BEGIN" { ANY_CHAR } "REMARK END"
 PIPE_FROM -> #indent PIPE_FROM

BLOCK_FROM:
 PROGRAMLINE_FROM  -> #block  PROGRAMLINE_FROM 

COMMAND_FROM:
 EXP_BOOLEAN_FROM OPTWHITESPACE ">>" OPTWHITESPACE "command.if:" OPTWHITESPACE ">>" OPTSEPARATOR BLOCK_FROM -> "if " EXP_BOOLEAN_FROM "?\n" BLOCK_FROM
 
ASSIGNMENT_FROM:
 "Meta:Assignment" OPTWHITESPACE ">>" OPTWHITESPACE EXPRESSION_FROM OPTWHITESPACE ">>" OPTWHITESPACE URI -> URI " = " EXPRESSION_FROM

BOOLEAN_TRUE:
 "TRUE" | "True" | "1"

BOOLEAN_FALSE:
 "FALSE" | "False" | "0"

NUMBER_FROM:
 "Number:" NUMBER [ "#" NUMBER_TO_SUB ] -> NUMBER NUMBER_TO_SUB
 URI
 EXP_ADD_FROM -> "(" EXP_ADD_FROM ")"

STRING_FROM:
 EXP_STRING_FROM -> "(" EXP_STRING_FROM ")"
 "String:" EXP_STRING_DECODE_FROM -> "“" EXP_STRING_DECODE_FROM "”"
 URI

BOOLEAN_FROM:
 "Boolean:" BOOLEAN_TRUE  -> "True"
 "Boolean:" BOOLEAN_FALSE -> "False"
 URI

EXP_POWER_FROM:
 "[" NUMBER_FROM WHITESPACE "Number:" NUMBER_TO_SUPER "]>>Number.power:" -> NUMBER_FROM NUMBER_TO_SUPER
 NUMBER_FROM

EXP_POWER_MULT_FROM:
 EXP_POWER_FROM -> " × " EXP_POWER_FROM

EXP_POWER_DIV_FROM:
 EXP_POWER_FROM -> " ÷ " EXP_POWER_FROM

EXP_MULT_FROM:
 "[" EXP_POWER_FROM { WHITESPACE EXP_POWER_MULT_FROM } "]>>Number.multiply:" -> EXP_POWER_FROM EXP_POWER_MULT_FROM
 "[" EXP_POWER_FROM { WHITESPACE EXP_POWER_DIV_FROM  } "]>>Number.divide:" -> EXP_POWER_FROM EXP_POWER_DIV_FROM
 EXP_POWER_FROM
 
EXP_MULT_ADD_FROM:
 EXP_MULT_FROM -> " + " EXP_MULT_FROM

EXP_MULT_SUB_FROM:
 EXP_MULT_FROM -> " - " EXP_MULT_FROM

EXP_ADD_FROM:
 "[" OPTWHITESPACE EXP_MULT_FROM { WHITESPACE EXP_MULT_ADD_FROM } OPTWHITESPACE "]>>Number.add:"      -> EXP_MULT_FROM EXP_MULT_ADD_FROM
 "[" OPTWHITESPACE EXP_MULT_FROM { WHITESPACE EXP_MULT_SUB_FROM } OPTWHITESPACE "]>>Number.subtract:" -> EXP_MULT_FROM EXP_MULT_SUB_FROM

EXP_NUMBER_FROM:
 EXP_ADD_FROM
 EXP_MULT_FROM

EXP_STRING_DECODE_FROM:
  URI -> #decodeuri URI
  
EXP_STRING_CONCAT_FROM:
 STRING_FROM -> " & " STRING_FROM

EXP_STRING_FROM:
 EXP_NUMBER_FROM OPTWHITESPACE ">>" OPTWHITESPACE "String.times:" OPTWHITESPACE ">>" STRING_FROM  -> EXP_NUMBER_FROM " times " STRING_FROM
 "[" OPTWHITESPACE STRING_FROM { WHITESPACE EXT_STRING_CONCAT_FROM } OPTWHITESPACE "]" OPTWHITESPACE ">>" OPTWHITESPACE "String.concatenate:"      -> STRING_FROM EXP_STRING_CONCAT_FROM

EXP_NOT_FROM:
 BOOLEAN_FROM OPTWHITESPACE ">>" OPTWHITESPACE "Boolean.not:"      ->  "not " BOOLEAN_FROM
 BOOLEAN_FROM
 
EXP_NOT2_FROM:
 EXP_NOT_FROM

EXP_OR_FROM:
 "[" OPTWHITESPACE EXP_NOT_FROM { WHITESPACE EXP_NOT2_FROM } OPTWHITESPACE "]>>Boolean.or:"      -> EXP_NOT_FROM " or " EXP_NOT2_FROM
 EXP_NOT_FROM

EXP_OR2_FROM:
  EXP_OR_FROM
  
EXP_BOOLEAN_FROM:
 "[" OPTWHITESPACE EXP_OR_FROM { WHITESPACE EXP_OR2_FROM } OPTWHITESPACE "]>>Boolean.and:"      -> EXP_OR_FROM " and " EXP_OR2_FROM
 EXP_OR_FROM
 EXP_NOT_FROM
 BOOLEAN_FROM
 
EXPRESSION_FROM:
 EXP_STRING_FROM
 EXP_BOOLEAN_FROM 
 EXP_NUMBER_FROM
 
FROM_DAWN_TO_BASIC:
 { OPTWHITESPACE PROGRAMLINE_FROM SEPARATOR }
