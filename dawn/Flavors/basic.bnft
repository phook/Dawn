#include "shared.bnft"
BASIC_CHAR:
  " " {" "} -> " "
  ANY_CHAR
  
BASIC_NATIVE:
  { BASIC_CHAR }  -> #encodeuri BASIC_CHAR

BASIC_END_NATIVE:
  OPTSEPARATOR "}" OPTSEPARATOR "endnative" 

BASIC_FUNCTION:
  "native" WHITESPACE "javascript" OPTSEPARATOR "{" OPTSEPARATOR BASIC_NATIVE BASIC_END_NATIVE -> "Native.Javascript:" BASIC_NATIVE

BASIC_ALL_INPUTS:
 "all" WHITESPACE    -> "_$"
 ""
 
BASIC_SPECIFICATION:
  OPTWHITESPACE "input" WHITESPACE BASIC_ALL_INPUTS URI OPTSEPARATOR  "{" OPTSEPARATOR BASIC_FUNCTION OPTSEPARATOR "}" -> "[" BASIC_FUNCTION "]>>NewInput:" URI BASIC_ALL_INPUTS
  OPTWHITESPACE "output" WHITESPACE URI OPTSEPARATOR -> "NewOutput:" URI

BASIC_BLOCK:
  BASIC_SPECIFICATION

BASIC_BLOCK_END:
  BASIC_SPECIFICATION -> " " BASIC_SPECIFICATION

BASIC_NATIVE_CONSTRUCTOR:
  SEPARATOR BASIC_FUNCTION SEPARATOR -> BASIC_FUNCTION 
  
BASIC_DEFINITION:
 "define" WHITESPACE URI SEPARATOR "{" [ BASIC_NATIVE_CONSTRUCTOR ] OPTSEPARATOR [ BASIC_BLOCK OPTSEPARATOR { BASIC_BLOCK_END OPTSEPARATOR } ] "}" -> "[" BASIC_NATIVE_CONSTRUCTOR BASIC_BLOCK BASIC_BLOCK_END "]>>NewResource:" URI

BASIC_SYNTAX:
 BASIC_DEFINITION ->  BASIC_DEFINITION "\n"

BASIC_EXP:
 BASIC_NUMBER
 URI
 "(" BASIC_EXPRESSION ")"

BASIC_POWER:
 BASIC_EXP "^" BASIC_EXPRESSION 
 
BASIC_MULT:
 BASIC_POWER { ("*"|"/") BASIC_POWER } 

BASIC_ADD:
 BASIC_MULT { ("+"|"-") BASIC_MULT }

BASIC_EXPRESSION:
 [ "-" ] BASIC_ADDEXPRESSION

MYDIGIT:
 "0".."9"
 ","
 "."
 "-"

DIGITS_TO_SUPER:
 "0" -> "⁰"
 "1" -> "¹"
 "2" -> "²"
 "3" -> "³"
 "4" -> "⁴"
 "5" -> "⁵"
 "6" -> "⁶"
 "7" -> "⁷"
 "8" -> "⁸"
 "9" -> "⁹"

DIGITS_TO_SUB:
 "0" -> "₀"
 "1" -> "₁"
 "2" -> "₂"
 "3" -> "₃"
 "4" -> "₄"
 "5" -> "₅"
 "6" -> "₆"
 "7" -> "₇"
 "8" -> "₈"
 "9" -> "₉"
 
NUMBER:
 { MYDIGIT }

NUMBER_TO_SUPER:
 { DIGITS_TO_SUPER }

NUMBER_TO_SUB:
 { DIGITS_TO_SUB }

URILOOKUP_FROM:
 URI

URILIST_FROM:
 URI { "|" URILOOKUP_FROM } 

PIPEEND_FROM:
  OPTWHITESPACE ">>" OPTWHITESPACE URILIST_FROM  [ PIPEEND_FROM ]
  OPTWHITESPACE ">>" OPTWHITESPACE PIPE_FROM     [ PIPEEND_FROM ]

PIPELISTELEMENTS_FROM:
  PIPE_FROM
  
PIPELISTEND_FROM:
 { SEPARATOR PIPELISTELEMENTS_FROM } 

INNER_PIPELIST_FROM:
 PIPE_FROM PIPELISTEND_FROM

PIPELIST_FROM:
 "[" OPTWHITESPACE INNER_PIPELIST_FROM OPTWHITESPACE "]" 

PIPE_FROM:
 URILIST_FROM  PIPEEND_FROM
 PIPELIST_FROM PIPEEND_FROM 
 URILIST_FROM

DAWN_PROGRAMLINE:
 EXPRESSION  ">>" OPTWHITESPACE "times:" OPTWHITESPACE ">>" STRING_EXPRESSION_SUB  -> EXPRESSION " times " STRING_EXPRESSION_SUB
 EXPRESSION [ PIPEEND_FROM ]
 "REMARK BEGIN" { ANY_CHAR } "REMARK END"
 PIPE_FROM

PRETTY_PROGRAMLINE:
 EXPRESSION " times " STRING_EXPRESSION_SUB -> EXPRESSION  ">>" OPTWHITESPACE "times:" OPTWHITESPACE ">>" STRING_EXPRESSION_SUB
 EXPRESSION [ PIPEEND_FROM ]
 "REMARK BEGIN" { ANY_CHAR } "REMARK END"
 PIPE_FROM

DAWN_NUMBER:
 "Number:" NUMBER [ "#" NUMBER_TO_SUB ] -> NUMBER NUMBER_TO_SUB
 "(" EXP_ADD ")"

EXP_POWER:
 "[" DAWN_NUMBER WHITESPACE "Number:" NUMBER_TO_SUPER "]>>Number.power:" -> DAWN_NUMBER NUMBER_TO_SUPER
 DAWN_NUMBER

EXP_POWER_MULT:
 EXP_POWER -> " × " EXP_POWER

EXP_POWER_DIV:
 EXP_POWER -> " ÷ " EXP_POWER

EXP_MULT:
 "[" EXP_POWER { WHITESPACE EXP_POWER_MULT } "]>>Number.multiply:" -> EXP_POWER EXP_POWER_MULT
 "[" EXP_POWER { WHITESPACE EXP_POWER_DIV  } "]>>Number.subtract:" -> EXP_POWER EXP_POWER_DIV
 EXP_POWER
 
EXP_MULT_ADD:
 EXP_MULT -> " + " EXP_MULT

EXP_MULT_SUB:
 EXP_MULT -> " - " EXP_MULT

EXP_ADD:
 "[" OPTWHITESPACE EXP_MULT { WHITESPACE EXP_MULT_ADD } OPTWHITESPACE "]>>Number.add:"      -> EXP_MULT EXP_MULT_ADD
 "[" OPTWHITESPACE EXP_MULT { WHITESPACE EXP_MULT_SUB } OPTWHITESPACE "]>>Number.subtract:" -> EXP_MULT EXP_MULT_SUB

EXPRESSION:
 EXP_ADD
 EXP_MULT

EXP_STRING_DECODE:
  URI -> #decodeuri URI
  
EXP_STRING:
 "String:" EXP_STRING_DECODE -> "“" EXP_STRING_DECODE "”"

EXP_STRING_CONCAT:
 EXP_STRING -> " & " EXP_STRING

EXP_STRING_EXPRESSION:
 "[" OPTWHITESPACE EXP_STRING { WHITESPACE EXP_STRING_CONCAT } OPTWHITESPACE "]" OPTWHITESPACE ">>" OPTWHITESPACE "String.concatenate:"      -> EXP_STRING EXP_STRING_CONCAT

STRING_EXPRESSION:
 EXP_STRING_EXPRESSION
 EXP_STRING

STRING_EXPRESSION_SUB:
 EXP_STRING_EXPRESSION -> "(" EXP_STRING_EXPRESSION ")"
 EXP_STRING -> #decodeuri EXP_STRING

FROM_DAWN:
 { OPTWHITESPACE FROM_PROGRAMLINE SEPARATOR }

TO_DAWN:
 BASIC_SYNTAX OPTENDLINE -> #significantwhitespace "{\n" "}\n" "" BASIC_SYNTAX "\n"