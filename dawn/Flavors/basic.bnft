#include "shared.bnft"
NUMBER:
 { MYDIGIT }

FLOWEND:
  OPTWHITESPACE ">>" OPTSEPARATOR URI  [ FLOWEND ] -> ">>" URI FLOWEND 
  OPTWHITESPACE ">>" OPTSEPARATOR FLOW [ FLOWEND ] -> ">>" FLOW FLOWEND

FLOWLISTELEMENTS:
  FLOW
  
FLOWLISTEND:
 { SEPARATOR FLOWLISTELEMENTS } 

INNER_FLOWLIST:
 FLOW FLOWLISTEND 

FLOWLIST:
 "[" OPTWHITESPACE [ INNER_FLOWLIST ] OPTWHITESPACE "]" 


FLOW:
 "Meta:" URI FLOWEND -> ""
 TD_STRING_EXPRESSION  FLOWEND 
 TD_NUMERIC_EXPRESSION FLOWEND 
 URI FLOWEND 
 FLOWLIST FLOWEND
 TD_STRING_EXPRESSION 
 TD_NUMERIC_EXPRESSION
 URI
 FLOWLIST


TD_STRING_LITERAL_PARTS:
 { ALPHA | DIGIT | " "} 

TD_STRING_LITERAL:
 TD_STRING_LITERAL_PARTS -> #encodeuri TD_STRING_LITERAL_PARTS

TD_STRING:
 "\"" TD_STRING_LITERAL "\"" -> "String:" TD_STRING_LITERAL
 "\'" TD_STRING_LITERAL "\'" -> "String:" TD_STRING_LITERAL

TD_STRING_END:
 TD_STRING -> " " TD_STRING

TD_STRING_CONCATENATION:
 TD_STRING OPTWHITESPACE { "&" OPTWHITESPACE TD_STRING_END} -> "[" TD_STRING TD_STRING_END "]>>concatenate:"

TD_STRING_EXPRESSION:
  TD_STRING_CONCATENATION
  TD_STRING

TD_DIGIT:
  DIGIT
  "A".."F"
  "a".."f"

TD_NUMBER_LITERAL:
 TD_DIGIT { TD_DIGIT  } [ "." TD_DIGIT { TD_DIGIT } ] [ ( "e"| "E" ) ( "+"| "-" ) DIGIT {DIGIT} ] [ "#" DIGIT {DIGIT}] 

TD_NUMBER:
 TD_NUMBER_LITERAL -> "Number:" TD_NUMBER_LITERAL
 "Number:" TD_NUMBER_LITERAL

TD_BASE:
 "(" TD_NUMERIC_EXPRESSION ")" -> TD_NUMERIC_EXPRESSION 
 TD_NUMBER -> TD_NUMBER

TD_PRIMARY:
 ["+" | "-"] TD_BASE

TD_SECONDARY:
  TD_PRIMARY

TD_POWER:
 TD_PRIMARY "^" TD_SECONDARY  -> "[" TD_PRIMARY " " TD_SECONDARY "]>>power:" 
 TD_PRIMARY

TD_POWER_END:
 TD_POWER -> " " TD_POWER
 
TD_MULT_OPERATOR:
 "*" | "×" -> "multiply:"
 "/" | "÷" -> "divide:"

TD_MULTIPLICATION:
 TD_POWER TD_MULT_OPERATOR TD_POWER_END  -> "[" TD_POWER TD_POWER_END "]>>" TD_MULT_OPERATOR 
 TD_POWER

TD_MULTIPLICATION_END:
 TD_MULTIPLICATION -> " " TD_MULTIPLICATION

TD_ADD_OPERATOR:
 "+" -> "add:"
 "-" -> "subtract:"

TD_ADDITION:
 TD_MULTIPLICATION TD_ADD_OPERATOR TD_MULTIPLICATION_END  -> "[" TD_MULTIPLICATION TD_MULTIPLICATION_END "]>>" TD_ADD_OPERATOR 
 TD_MULTIPLICATION

TD_NUMERIC_EXPRESSION:
 TD_ADDITION

TD_CHAR:
  " " {" "} -> " "
  ANY_CHAR
  
TD_NATIVE:
  { TD_CHAR }  -> #encodeuri TD_CHAR

TD_END_NATIVE:
  OPTSEPARATOR "}" OPTSEPARATOR "endnative" 

TD_FUNCTION_LINES:
  OPTWHITESPACE FLOW -> FLOW

TD_FUNCTION_LINES_ALT:
 TD_FUNCTION_LINES -> " " TD_FUNCTION_LINES

TD_FUNCTION:
 TD_NATIVE_BLOCK
 TD_FUNCTION_LINES { SEPARATOR TD_FUNCTION_LINES_ALT} -> TD_FUNCTION_LINES TD_FUNCTION_LINES_ALT

TD_ALL_INPUTS:
 "all" WHITESPACE    -> "_$"
 ""
 
TD_SPECIFICATION:
  OPTWHITESPACE "input" WHITESPACE TD_ALL_INPUTS URI OPTSEPARATOR  "{" OPTSEPARATOR TD_FUNCTION OPTSEPARATOR "}" -> "[" TD_FUNCTION "]>>NewInput:" URI TD_ALL_INPUTS
  OPTWHITESPACE "output" WHITESPACE URI OPTSEPARATOR -> "NewOutput:" URI

TD_BLOCK:
  TD_SPECIFICATION

TD_BLOCK_END:
  TD_SPECIFICATION -> " " TD_SPECIFICATION

TD_NATIVE_BLOCK:
  "native" WHITESPACE "javascript" OPTSEPARATOR "{" OPTSEPARATOR TD_NATIVE TD_END_NATIVE -> "Native.Javascript:" TD_NATIVE
  
TD_DEFINITION:
 "define" WHITESPACE URI SEPARATOR "{" [ TD_NATIVE_BLOCK ] OPTSEPARATOR [ TD_BLOCK OPTSEPARATOR { TD_BLOCK_END OPTSEPARATOR } ] "}" -> "[" TD_NATIVE_CONSTRUCTOR TD_BLOCK TD_BLOCK_END "]>>NewResource:" URI



TD_EXPRESSION:
  TD_NUMERIC_EXPRESSION
  TD_STRING_EXPRESSION
  
MYDIGIT:
 "0".."9"
 ","
 "."
 "-"

FD_DIGITS_SUPER:
 "0" -> "⁰"
 "1" -> "¹"
 "2" -> "²"
 "3" -> "³"
 "4" -> "⁴"
 "5" -> "⁵"
 "6" -> "⁶"
 "7" -> "⁷"
 "8" -> "⁸"
 "9" -> "⁹"

FD_DIGITS_SUB:
 "0" -> "₀"
 "1" -> "₁"
 "2" -> "₂"
 "3" -> "₃"
 "4" -> "₄"
 "5" -> "₅"
 "6" -> "₆"
 "7" -> "₇"
 "8" -> "₈"
 "9" -> "₉"
 
 
FD_DIGITS_SUPER_TAGGED:
 FD_DIGITS_SUPER -> "<span class=\"super\">" FD_DIGITS_SUPER "</span>"
 
FD_NUMBER_SUPER:
 { FD_DIGITS_SUPER_TAGGED }

FD_NUMBER_SUB:
 { FD_DIGITS_SUB }

FD_NUMBER:
 "Number:" NUMBER [ "#" FD_NUMBER_SUB ] -> NUMBER FD_NUMBER_SUB
 FD_EXPADD -> "(" FD_EXPADD ")"

FD_NUMBER_BASED:
 "Number:" NUMBER [ "#" NUMBER ]

FD_EXP_POWER:
 "[" FD_NUMBER WHITESPACE "Number:" FD_NUMBER_SUPER OPTWHITESPACE "]>>power:" -> FD_NUMBER FD_NUMBER_SUPER
 "[" FD_NUMBER WHITESPACE FD_NUMBER_BASED OPTWHITESPACE "]>>power:" -> FD_NUMBER "^" FD_NUMBER_BASED
 FD_NUMBER

FD_EXP_POWER_MULT:
 FD_EXP_POWER -> "×" FD_EXP_POWER

FD_EXP_POWER_DIV:
 FD_EXP_POWER -> "÷" FD_EXP_POWER

FD_EXP_MULT:
 "[" FD_EXP_POWER { WHITESPACE FD_EXP_POWER_MULT OPTWHITESPACE } OPTWHITESPACE "]>>multiply:" -> FD_EXP_POWER FD_EXP_POWER_MULT
 "[" FD_EXP_POWER { WHITESPACE FD_EXP_POWER_DIV OPTWHITESPACE } OPTWHITESPACE "]>>divide:" -> FD_EXP_POWER FD_EXP_POWER_DIV
 FD_EXP_POWER
 
FD_EXP_MULT_ADD:
 FD_EXP_MULT -> "+" FD_EXP_MULT

FD_EXP_MULT_SUB:
 FD_EXP_MULT -> "-" FD_EXP_MULT

FD_EXP_ADD:
 "["  FD_EXP_MULT { WHITESPACE FD_EXP_MULT_ADD OPTWHITESPACE } OPTWHITESPACE "]>>add:"      -> FD_EXP_MULT FD_EXP_MULT_ADD
 "["  FD_EXP_MULT { WHITESPACE FD_EXP_MULT_SUB OPTWHITESPACE } OPTWHITESPACE "]>>subtract:" -> FD_EXP_MULT FD_EXP_MULT_SUB
 FD_EXP_MULT

FD_NUMERIC_EXPRESSION:
 FD_EXP_ADD

FD_EXPRESSION:
 FD_NUMERIC_EXPRESSION
 FD_STRING_EXPRESSION
 
FD_EXP_STRING_DECODE:
  URI -> #decodeuri URI
  
FD_EXP_STRING:
 "String:" FD_EXP_STRING_DECODE -> "“" FD_EXP_STRING_DECODE "”"

FD_EXP_STRING_CONCAT:
 FD_EXP_STRING -> " & " FD_EXP_STRING

FD_EXP_STRING_EXPRESSION:
 "[" OPTWHITESPACE FD_EXP_STRING { WHITESPACE FD_EXP_STRING_CONCAT } OPTWHITESPACE "]" OPTWHITESPACE ">>" OPTWHITESPACE "concatenate:"      -> FD_EXP_STRING FD_EXP_STRING_CONCAT

FD_STRING_EXPRESSION:
 FD_EXP_STRING_EXPRESSION
 FD_EXP_STRING

STRING_EXPRESSION_SUB:
 FD_EXPSTRING_EXPRESSION -> "(" FD_EXPSTRING_EXPRESSION ")"
 FD_EXPSTRING -> #decodeuri FD_EXPSTRING

FROMDAWN_KEYBOARD_COMMANDPROMT:
  OPTWHITESPACE FD_EXPRESSION OPTWHITESPACE

FROMDAWN_COMMANDPROMT:
  OPTWHITESPACE FD_EXPRESSION OPTWHITESPACE

TODAWN_COMMANDPROMT:
  OPTWHITESPACE TD_EXPRESSION OPTWHITESPACE
  OPTWHITESPACE FLOW OPTWHITESPACE

FROMDAWN_PROGRAM:
 { OPTWHITESPACE FD_SYNTAX SEPARATOR }

TODAWN_PROGRAM:
 { OPTWHITESPACE TD_SYNTAX SEPARATOR }> #significantwhitespace "{\n" "}\n" "" TD_SYNTAX "\n"

