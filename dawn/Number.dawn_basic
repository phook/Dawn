define Number
  output Number
  input all Number
    native javascript
      this._get_resource()._value = number._value;
    endnative
  input go
    native javascript
        return this?._out_Number(this._get_resource());
    endnative
  input instanciate
    native javascript
         let newObject=this._get_resource()._clone();
          let val = input_instanciate._value;
          let hashpos= val.indexOf("#");
          if (hashpos != -1)
          {
              let calcval=new Dawn.bigRat(0);
              let divider=0;
              let multiplier = new Dawn.bigRat(1);
              let base = parseInt(val.substr(hashpos+1));
              if (isNaN(baseI))
              {
                // raise error
              }
              val = val.substr(0,hashpos).toUpperCase() + "_";
              if (base<2 || base>16)
              {
                // raise error
              }
              for(let x=0; x<val.length; x++)
              {
                base = new Dawn.bigRat(base);
                let ch = val[x];
                let nx = val[x+1];
                if (ch == "E" && (nx=="+" || nx=="-"))
                {
                  let exp = parseInt(val.substr(x+2));
                  if (isNaN(exp))
                  {
                    // raise error
                  }
                  multiplier = base.pow(new Dawn.bigRat(exp)); 
                  val="";
                }
                if ("0123456789ABCDEF".indexOf(ch) != -1 && "0123456789ABCDEF".indexOf(ch) < base)
                {
                  calcval = calcval.multiply(base) + new Dawn.bigRat("0123456789ABCDEF".indexOf(ch));
                  divider = divider.multiply(base);
                }
                else
                if ("." == ch)
                  divider = new Dawn.bigRat(1);
                else
                if ("_" !== ch || "," !== ch)
                {
                  // raise error
                }
              }
              if (divider)  
                  calcval = calcval.divide(divider);
              newObject._value=calcval.multiply(multiplier);
          }
          else
              newObject._value=new Dawn.bigRat(input_instanciate._value);

         return newObject._instanciate_processor();
    endnative