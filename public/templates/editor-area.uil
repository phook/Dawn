{:editor-area flex=1 display=flex
    {row
        {col
            {tabs
            }
            {flavor-selector
            }
        }
        {layers
            {layers
            }
            {row pointer-events=none
                {filler}
                {col
                    {filler}
                    {floating-button-menu pointer-events=auto padding-right=15px padding-bottom=15px
                    }
                }
            }
        }
    }
    {row display=none
        {tab}
        {editor}
    }
    {script
      var currentElement = document.currentScript.parentElement;
      
      async function async_fileToString(url)
      {
        let response = await fetch(url);
        let text     = await response.text();
        return text;
      }
      setTimeout(async function()
      {
           let basic_flavor_source = await fetch("dawn/Flavors/basic.bnft");
           basic_flavor_source = await basic_flavor_source.text();
           let basic_flavor_parser = await BNFT.async_BNFT(basic_flavor_source, {alert:console.log, fileToString: async_fileToString, path:"dawn/Flavors/"});
           let dawn_flavor_source = await fetch("dawn/Flavors/dawn.bnft");
           dawn_flavor_source =  await dawn_flavor_source.text();
           let dawn_flavor_parser = await BNFT.async_BNFT(dawn_flavor_source, {alert:console.log, fileToString:  async_fileToString, path:"dawn/Flavors/"});
           
           
          
            var tabs   = [];
            var layers = [];

            function elementFromHTML(htmlString) {
              var div = document.createElement('div');
              div.innerHTML = htmlString.trim();
              return div.firstChild; 
            }

            var loading = []; 
            //debugHook();

            async function load(url)
            {
                url = document.editorURL + url;
                if (loading.indexOf(url)===-1)
                {
                    loading.push(url);
                    debugHook();
                    
                    await fetch(url)
                     .then(response => response.text())
                     .then(function(source) {
                        var element=templateClone("editor");
                        uilAppendChild(layers,element);
                        
                        console.log(source);
                        
                        var editElement = element.getElementsByClassName("editarea")[0];
                        var editor = ace.edit(editElement, {mode: "ace/mode/dawn"});
                        editor.session.setValue(source);
                        editor.setReadOnly(false); 
                        editElement.editor=editor;
                        
                        lateCompile=0;
                        editor.session.on('change', function() {
                          clearTimeout(lateCompile);
                          lateCompile = setTimeout(autoCompile,3000);
                        });

                        function autoCompile() 
                        {
                          var val = editor.session.getValue();
                          
                          let to_dawn_result = basic_flavor_parser.parse(val,{alert:console.log, nonterminal:"TO_DAWN"});
    
                          //console.log(to_dawn_result);

                          let to_javascript_result = dawn_flavor_parser.parse(to_dawn_result,{alert:console.log, nonterminal:"PROGRAMBODY"});
                          
                          //console.log(to_javascript_result);

                           // eval and running bind are complex - scope must be supplied 
                          let to_code_result = new Function("scope","return " + to_javascript_result);
                          let bound_result = to_code_result(Dawn.root);
    
                           // bound result is the executable compiled dawn javascript object, so if we are here ok the source is good to save
        
                          // user should press button for - flavor->dawn->flavor and save dawn file - red marker in tab for unsaved files and errors
                          
                          // NOTE: save is for store for file systems, add for git systems - another button for commit is needed
                          
                        }

                        
                        let tabtext = url.split("/").pop();
                        let tab = templateClone("tab",tabtext);
                        uilAppendChild(tabs,tab);

                        function close()
                        {
                            debugHook();
                            uilRemoveChild(layers,element);
                            uilRemoveChild(tabs,tab);
                            loading = loading.filter(element => element !== url);
                        }

                        tab.close_tab = close;
                        tab.connected_editor = element;
                        rerunScripts.call(tab);
                    });
                }
            }
            
            document.uilfunctions.loadEditor = load;
            document.loadEditor = load;

          setTimeout(async function(){
            //debugHook();
            tabs   = currentElement.getElementsByClassName("mdc-tab-scroller__scroll-content")[0];
            layers = currentElement.getElementsByClassName("layers")[1];

            await document.loadEditor("dawn_ide.uil");
            await document.loadEditor("dawn/times.dawn_basic");
            },100);
         },0);
    }
}
